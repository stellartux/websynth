//@ts-check
import { Note } from './note.js'
/** @typedef {import('./bytebeat-processor.js').BytebeatProcessorOptions} BytebeatProcessorOptions */

export class BytebeatNode extends AudioWorkletNode {
  /**
   * @param {AudioContext} context
   * @param {BytebeatProcessorOptions} processorOptions
   */
  constructor(context, processorOptions) {
    processorOptions.frequency ??= 8000
    processorOptions.sampleRate ??= context.sampleRate
    processorOptions.tempo ??= 120
    processorOptions.floatMode ??= false
    super(context, 'bytebeat-processor', {
      numberOfInputs: 0,
      numberOfOutputs: 1,
      processorOptions,
    })
  }

  start(startTime = 0) {
    this.port.postMessage({ message: 'start', startTime })
  }

  stop(stopTime = 0) {
    this.port.postMessage({ message: 'stop', stopTime })
  }
}

export class BytebeatNote extends Note {
  /**
   * A note whose sound is generated by one or more BytebeatNode
   * @param {AudioNode|AudioContext} target
   * @param {object} noteParams
   * @param {BytebeatProcessorOptions[]} oscParams array of oscillator specific options
   */
  constructor(target, noteParams, oscParams) {
    super(target, noteParams)
    for (const param of oscParams) {
      const node = new BytebeatNode(this.context, param)
      node.connect(this.envGain)
      node.start()
      this.oscs.push(node)
    }
  }
}
